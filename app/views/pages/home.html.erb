<h3> Using Authentication Token </h3>

After Sign up / Sign in, a new token is generated.
Token will be expired in 2 weeks

Token information are stored in HEADER in response and should be passed as HEADERS for each request

<h3> Token Header Format </h3>

The headers follow the RFC 6750 Bearer Token format:

Authentication headers example:
<br><br>

<pre>
"access-token": "wwwww",
"client":       "xxxxx",
"expiry":       "yyyyy",
"uid":          "zzzzz"
</pre>

The authentication headers consists of the following params:
<br>
<br>
<table class="table table-bordered">
  <thead>
  <tr>
    <th>param</th>
    <th>description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td><strong><code>access-token</code></strong></td>
    <td>This serves as the user's password for each request. A hashed version of this value is stored in the database
      for later comparison. This value should be changed on each request.
    </td>
  </tr>
  <tr>
    <td><strong><code>client</code></strong></td>
    <td>This enables the use of multiple simultaneous sessions on different clients. (For example, a user may want to be
      authenticated on both their phone and their laptop at the same time.)
    </td>
  </tr>
  <tr>
    <td><strong><code>expiry</code></strong></td>
    <td>The date at which the current session will expire. This can be used by clients to invalidate expired tokens
      without the need for an API request.
    </td>
  </tr>
  <tr>
    <td><strong><code>uid</code></strong></td>
    <td>A unique value that is used to identify the user. This is necessary because searching the DB for users by their
      access token will make the API susceptible to
      <a href="http://codahale.com/a-lesson-in-timing-attacks/">timing attacks</a>.
    </td>
  </tr>
  </tbody>
</table>

The authentication headers required for each request will be available in the response from the previous request.
